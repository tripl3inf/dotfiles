# Ring the bell if any background window rang a bell
set -g bell-action any

# Default termtype. If the rcfile sets $TERM, that overrides this value.
set -g default-terminal screen-256color

# Keep your finger on ctrl, or don't
bind-key ^D detach-client

# Screen like binding
unbind C-b
set -g prefix C-x
#bind C-x send-prefix
#bind C-c send-prefix
bind-key -n C-z send-prefix

# Create splits and vertical splits
bind-key v split-window -h -p 50 -c "#{pane_current_path}"
bind-key ^V split-window -h -p 50 -c "#{pane_current_path}"
bind-key s split-window -p 50 -c "#{pane_current_path}"
bind-key ^S split-window -p 50 -c "#{pane_current_path}"

# Pane resize in all four directions using vi bindings.
# Can use these raw but I map them to shift-ctrl-<h,j,k,l> in iTerm.
#bind-key J resize-pane -D
#bind-key K resize-pane -U
#bind-key H resize-pane -L
#bind-key L resize-pane -R

# Smart pane switching with awareness of vim splits.
# Source: https://github.com/christoomey/vim-tmux-navigator
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\ run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)g?(view|vim?)(diff)?$' && tmux send-keys 'C-\\') || tmux select-pane -l"

# Shift arrow to switch windows
bind -n S-Left  previous-window
bind -n S-Right next-window
#bind-key h previous-window
#bind-key l next-window

# Use vi keybindings for tmux commandline input.
# Note that to get command mode you need to hit ESC twice...
set -g status-keys vi

# Use vi keybindings in copy and choice modes
setw -g mode-keys vi

#unbind [
#bind Escape copy-mode
#unbind p
#bind p paste-buffer
##bind-key -t vi-copy 'v' begin-selection
##bind-key -t vi-copy 'y' copy-selection
#bind-key -t vi-copy v begin-selection
#bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"




# easily toggle synchronization (mnemonic: e is for echo)
# sends input to all panes in a given window.
bind e setw synchronize-panes on
bind E setw synchronize-panes off

# set first window to index 1 (not 0) to map more to the keyboard layout...
set-option -g base-index 1
set-window-option -g pane-base-index 1

# color scheme (styled as vim-powerline)
set -g status-left-length 70
set -g status-right-length 451
set -g status-fg colour46
set -g status-bg colour232
set -g pane-border-fg colour152
set -g pane-active-border-fg colour46
set -g message-fg colour38
set -g message-bg colour232 #2
set -g message-attr bold
set -g status-left '#[fg=colour46,bg=colour232,bold] ❐ #S #[fg=colour232,bg=colour38,nobold]⮀#[fg=colour232,bg=colour38,bold] #(whoami) #[fg=colour38,bg=colour232,nobold]⮀'
# set -g status-left '#[fg=colour15,bg=colour232,bold] ❐ #S #[fg=colour232,bg=colour20,nobold]⮀#[fg=colour15,bg=colour20,bold] #(whoami) #[fg=colour21,bg=colour232,nobold]⮀'
set -g window-status-format "#[fg=colour46,bg=colour232,bold] #I #W "
set -g window-status-current-format "#[fg=colour232,bg=colour46]⮀#[fg=232,bg=colour46,noreverse,bold] #I: #W #[fg=colour46,bg=colour232,nobold]⮀"

# Patch for OS X pbpaste and pbcopy under tmux.
set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"


# No escape time for vi mode
set -sg escape-time 0

# Screen like binding for last window
#unbind l
#bind C-a last-window

# Bigger history
set -g history-limit 10000

# New windows/pane in $PWD
bind c new-window -c "#{pane_current_path}"

# force a reload of the config file
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Local config
if-shell "[ -f ~/.tmux.conf.user ]" 'source ~/.tmux.conf.user'

# By default, all windows in a session are constrained to the size of the 
# smallest client connected to that session, 
# even if both clients are looking at different windows. 
# It seems that in this particular case, Screen has the better default 
# where a window is only constrained in size if a smaller client 
# is actively looking at it.
setw -g aggressive-resize on